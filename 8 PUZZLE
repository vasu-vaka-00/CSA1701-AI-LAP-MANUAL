# 8puzzle_astar.py
import heapq

GOAL = (1,2,3,4,5,6,7,8,0)  # 0 is blank
MOVES = {0:(1,3),1:(0,2,4),2:(1,5),3:(0,4,6),4:(1,3,5,7),5:(2,4,8),6:(3,7),7:(4,6,8),8:(5,7)}

def manhattan(state):
    s = 0
    for i,v in enumerate(state):
        if v==0: continue
        gi = v-1
        s += abs(i//3 - gi//3) + abs(i%3 - gi%3)
    return s

def neighbors(state):
    z = state.index(0)
    for m in MOVES[z]:
        lst = list(state)
        lst[z], lst[m] = lst[m], lst[z]
        yield tuple(lst)

def astar(start):
    openp = [(manhattan(start), 0, start, None)]
    came = {}
    gscore = {start:0}
    while openp:
        f,g,state,parent = heapq.heappop(openp)
        if state in came: continue
        came[state] = parent
        if state == GOAL:
            path = []
            cur = state
            while cur:
                path.append(cur); cur = came[cur]
            return list(reversed(path))
        for n in neighbors(state):
            ng = g + 1
            if n in gscore and ng >= gscore[n]: continue
            gscore[n] = ng
            heapq.heappush(openp, (ng + manhattan(n), ng, n, state))
    return None

if __name__ == "__main__":
    start = (1,2,3,4,0,6,7,5,8)  # sample
    path = astar(start)
    if path:
        for p in path:
            print(p[:3]); print(p[3:6]); print(p[6:]); print()
    else:
        print("No solution")
